// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Game entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Game entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Game", id.toString(), this);
  }

  static load(id: string): Game | null {
    return store.get("Game", id) as Game | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get firstSegmentStart(): BigInt {
    let value = this.get("firstSegmentStart");
    return value.toBigInt();
  }

  set firstSegmentStart(value: BigInt) {
    this.set("firstSegmentStart", Value.fromBigInt(value));
  }

  get segmentLength(): BigInt {
    let value = this.get("segmentLength");
    return value.toBigInt();
  }

  set segmentLength(value: BigInt) {
    this.set("segmentLength", Value.fromBigInt(value));
  }

  get currentSegment(): BigInt {
    let value = this.get("currentSegment");
    return value.toBigInt();
  }

  set currentSegment(value: BigInt) {
    this.set("currentSegment", Value.fromBigInt(value));
  }

  get lastSegment(): BigInt {
    let value = this.get("lastSegment");
    return value.toBigInt();
  }

  set lastSegment(value: BigInt) {
    this.set("lastSegment", Value.fromBigInt(value));
  }

  get totalGamePrincipal(): BigInt {
    let value = this.get("totalGamePrincipal");
    return value.toBigInt();
  }

  set totalGamePrincipal(value: BigInt) {
    this.set("totalGamePrincipal", Value.fromBigInt(value));
  }

  get totalGameInterest(): BigInt {
    let value = this.get("totalGameInterest");
    return value.toBigInt();
  }

  set totalGameInterest(value: BigInt) {
    this.set("totalGameInterest", Value.fromBigInt(value));
  }

  get externalPoolLiquidity(): BigInt {
    let value = this.get("externalPoolLiquidity");
    return value.toBigInt();
  }

  set externalPoolLiquidity(value: BigInt) {
    this.set("externalPoolLiquidity", Value.fromBigInt(value));
  }

  get redeemed(): boolean {
    let value = this.get("redeemed");
    return value.toBoolean();
  }

  set redeemed(value: boolean) {
    this.set("redeemed", Value.fromBoolean(value));
  }

  get withdrawAmountAllocated(): boolean {
    let value = this.get("withdrawAmountAllocated");
    return value.toBoolean();
  }

  set withdrawAmountAllocated(value: boolean) {
    this.set("withdrawAmountAllocated", Value.fromBoolean(value));
  }

  get players(): Array<string> {
    let value = this.get("players");
    return value.toStringArray();
  }

  set players(value: Array<string>) {
    this.set("players", Value.fromStringArray(value));
  }

  get winners(): Array<string> {
    let value = this.get("winners");
    return value.toStringArray();
  }

  set winners(value: Array<string>) {
    this.set("winners", Value.fromStringArray(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Player entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Player entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Player", id.toString(), this);
  }

  static load(id: string): Player | null {
    return store.get("Player", id) as Player | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get mostRecentSegmentPaid(): BigInt {
    let value = this.get("mostRecentSegmentPaid");
    return value.toBigInt();
  }

  set mostRecentSegmentPaid(value: BigInt) {
    this.set("mostRecentSegmentPaid", Value.fromBigInt(value));
  }

  get amountPaid(): BigInt {
    let value = this.get("amountPaid");
    return value.toBigInt();
  }

  set amountPaid(value: BigInt) {
    this.set("amountPaid", Value.fromBigInt(value));
  }

  get withdrawAmount(): BigInt {
    let value = this.get("withdrawAmount");
    return value.toBigInt();
  }

  set withdrawAmount(value: BigInt) {
    this.set("withdrawAmount", Value.fromBigInt(value));
  }

  get withdrawn(): boolean {
    let value = this.get("withdrawn");
    return value.toBoolean();
  }

  set withdrawn(value: boolean) {
    this.set("withdrawn", Value.fromBoolean(value));
  }
}
