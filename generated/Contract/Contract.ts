// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminWithdrawal extends ethereum.Event {
  get params(): AdminWithdrawal__Params {
    return new AdminWithdrawal__Params(this);
  }
}

export class AdminWithdrawal__Params {
  _event: AdminWithdrawal;

  constructor(event: AdminWithdrawal) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalGameInterest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get adminFeeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get adminIncentiveAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get segment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EarlyWithdrawal extends ethereum.Event {
  get params(): EarlyWithdrawal__Params {
    return new EarlyWithdrawal__Params(this);
  }
}

export class EarlyWithdrawal__Params {
  _event: EarlyWithdrawal;

  constructor(event: EarlyWithdrawal) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalGamePrincipal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsRedeemedFromExternalPool extends ethereum.Event {
  get params(): FundsRedeemedFromExternalPool__Params {
    return new FundsRedeemedFromExternalPool__Params(this);
  }
}

export class FundsRedeemedFromExternalPool__Params {
  _event: FundsRedeemedFromExternalPool;

  constructor(event: FundsRedeemedFromExternalPool) {
    this._event = event;
  }

  get totalAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalGamePrincipal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalGameInterest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get curveRewards(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalIncentiveAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class JoinedGame extends ethereum.Event {
  get params(): JoinedGame__Params {
    return new JoinedGame__Params(this);
  }
}

export class JoinedGame__Params {
  _event: JoinedGame;

  constructor(event: JoinedGame) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WinnersAnnouncement extends ethereum.Event {
  get params(): WinnersAnnouncement__Params {
    return new WinnersAnnouncement__Params(this);
  }
}

export class WinnersAnnouncement__Params {
  _event: WinnersAnnouncement;

  constructor(event: WinnersAnnouncement) {
    this._event = event;
  }

  get winners(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get playerReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get playerCurveReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get playerIncentive(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Contract__playersResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  AAVE_POOL(): BigInt {
    let result = super.call("AAVE_POOL", "AAVE_POOL():(uint64)", []);

    return result[0].toBigInt();
  }

  try_AAVE_POOL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("AAVE_POOL", "AAVE_POOL():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ATRI_CRYPTO_POOL(): BigInt {
    let result = super.call(
      "ATRI_CRYPTO_POOL",
      "ATRI_CRYPTO_POOL():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_ATRI_CRYPTO_POOL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ATRI_CRYPTO_POOL",
      "ATRI_CRYPTO_POOL():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NUM_AAVE_TOKENS(): BigInt {
    let result = super.call(
      "NUM_AAVE_TOKENS",
      "NUM_AAVE_TOKENS():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_NUM_AAVE_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NUM_AAVE_TOKENS",
      "NUM_AAVE_TOKENS():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NUM_ATRI_CRYPTO_TOKENS(): BigInt {
    let result = super.call(
      "NUM_ATRI_CRYPTO_TOKENS",
      "NUM_ATRI_CRYPTO_TOKENS():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_NUM_ATRI_CRYPTO_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NUM_ATRI_CRYPTO_TOKENS",
      "NUM_ATRI_CRYPTO_TOKENS():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePlayersCount(): BigInt {
    let result = super.call(
      "activePlayersCount",
      "activePlayersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_activePlayersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activePlayersCount",
      "activePlayersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adminFeeAmount(): BigInt {
    let result = super.call("adminFeeAmount", "adminFeeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_adminFeeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "adminFeeAmount",
      "adminFeeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adminWithdraw(): boolean {
    let result = super.call("adminWithdraw", "adminWithdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_adminWithdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("adminWithdraw", "adminWithdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowRenouncingOwnership(): boolean {
    let result = super.call(
      "allowRenouncingOwnership",
      "allowRenouncingOwnership():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_allowRenouncingOwnership(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRenouncingOwnership",
      "allowRenouncingOwnership():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  curve(): Address {
    let result = super.call("curve", "curve():(address)", []);

    return result[0].toAddress();
  }

  try_curve(): ethereum.CallResult<Address> {
    let result = super.tryCall("curve", "curve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curveRewardsPerPlayer(): BigInt {
    let result = super.call(
      "curveRewardsPerPlayer",
      "curveRewardsPerPlayer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_curveRewardsPerPlayer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "curveRewardsPerPlayer",
      "curveRewardsPerPlayer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customFee(): BigInt {
    let result = super.call("customFee", "customFee():(uint128)", []);

    return result[0].toBigInt();
  }

  try_customFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("customFee", "customFee():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daiToken(): Address {
    let result = super.call("daiToken", "daiToken():(address)", []);

    return result[0].toAddress();
  }

  try_daiToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiToken", "daiToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  earlyWithdrawalFee(): BigInt {
    let result = super.call(
      "earlyWithdrawalFee",
      "earlyWithdrawalFee():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_earlyWithdrawalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earlyWithdrawalFee",
      "earlyWithdrawalFee():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstSegmentStart(): BigInt {
    let result = super.call(
      "firstSegmentStart",
      "firstSegmentStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstSegmentStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstSegmentStart",
      "firstSegmentStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauge(): Address {
    let result = super.call("gauge", "gauge():(address)", []);

    return result[0].toAddress();
  }

  try_gauge(): ethereum.CallResult<Address> {
    let result = super.tryCall("gauge", "gauge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  impermanentLossShare(): BigInt {
    let result = super.call(
      "impermanentLossShare",
      "impermanentLossShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_impermanentLossShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "impermanentLossShare",
      "impermanentLossShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inboundTokenIndex(): BigInt {
    let result = super.call(
      "inboundTokenIndex",
      "inboundTokenIndex():(int128)",
      []
    );

    return result[0].toBigInt();
  }

  try_inboundTokenIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inboundTokenIndex",
      "inboundTokenIndex():(int128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  incentiveToken(): Address {
    let result = super.call("incentiveToken", "incentiveToken():(address)", []);

    return result[0].toAddress();
  }

  try_incentiveToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "incentiveToken",
      "incentiveToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  iterablePlayers(param0: BigInt): Address {
    let result = super.call(
      "iterablePlayers",
      "iterablePlayers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_iterablePlayers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "iterablePlayers",
      "iterablePlayers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastSegment(): BigInt {
    let result = super.call("lastSegment", "lastSegment():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastSegment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastSegment", "lastSegment():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  matic(): Address {
    let result = super.call("matic", "matic():(address)", []);

    return result[0].toAddress();
  }

  try_matic(): ethereum.CallResult<Address> {
    let result = super.tryCall("matic", "matic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxPlayersCount(): BigInt {
    let result = super.call(
      "maxPlayersCount",
      "maxPlayersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxPlayersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxPlayersCount",
      "maxPlayersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  players(param0: Address): Contract__playersResult {
    let result = super.call(
      "players",
      "players(address):(bool,bool,bool,address,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__playersResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_players(param0: Address): ethereum.CallResult<Contract__playersResult> {
    let result = super.tryCall(
      "players",
      "players(address):(bool,bool,bool,address,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__playersResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolType(): BigInt {
    let result = super.call("poolType", "poolType():(uint64)", []);

    return result[0].toBigInt();
  }

  try_poolType(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolType", "poolType():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemed(): boolean {
    let result = super.call("redeemed", "redeemed():(bool)", []);

    return result[0].toBoolean();
  }

  try_redeemed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("redeemed", "redeemed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsPerPlayer(): BigInt {
    let result = super.call(
      "rewardsPerPlayer",
      "rewardsPerPlayer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardsPerPlayer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsPerPlayer",
      "rewardsPerPlayer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  segmentLength(): BigInt {
    let result = super.call("segmentLength", "segmentLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_segmentLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "segmentLength",
      "segmentLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  segmentPayment(): BigInt {
    let result = super.call("segmentPayment", "segmentPayment():(uint256)", []);

    return result[0].toBigInt();
  }

  try_segmentPayment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "segmentPayment",
      "segmentPayment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalGameInterest(): BigInt {
    let result = super.call(
      "totalGameInterest",
      "totalGameInterest():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalGameInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGameInterest",
      "totalGameInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalGamePrincipal(): BigInt {
    let result = super.call(
      "totalGamePrincipal",
      "totalGamePrincipal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalGamePrincipal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGamePrincipal",
      "totalGamePrincipal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalIncentiveAmount(): BigInt {
    let result = super.call(
      "totalIncentiveAmount",
      "totalIncentiveAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalIncentiveAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalIncentiveAmount",
      "totalIncentiveAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winnerCount(): BigInt {
    let result = super.call("winnerCount", "winnerCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_winnerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("winnerCount", "winnerCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winners(param0: BigInt): Address {
    let result = super.call("winners", "winners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_winners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("winners", "winners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumberOfPlayers(): BigInt {
    let result = super.call(
      "getNumberOfPlayers",
      "getNumberOfPlayers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfPlayers",
      "getNumberOfPlayers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentSegment(): BigInt {
    let result = super.call(
      "getCurrentSegment",
      "getCurrentSegment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentSegment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentSegment",
      "getCurrentSegment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isGameCompleted(): boolean {
    let result = super.call("isGameCompleted", "isGameCompleted():(bool)", []);

    return result[0].toBoolean();
  }

  try_isGameCompleted(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGameCompleted",
      "isGameCompleted():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _inboundCurrency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _inboundTokenIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _poolType(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _gauge(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _segmentCount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _segmentLength(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _segmentPayment(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _earlyWithdrawalFee(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _customFee(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _maxPlayersCount(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }

  get _curve(): Address {
    return this._call.inputValues[11].value.toAddress();
  }

  get _matic(): Address {
    return this._call.inputValues[12].value.toAddress();
  }

  get _incentiveToken(): Address {
    return this._call.inputValues[13].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class AdminFeeWithdrawCall extends ethereum.Call {
  get inputs(): AdminFeeWithdrawCall__Inputs {
    return new AdminFeeWithdrawCall__Inputs(this);
  }

  get outputs(): AdminFeeWithdrawCall__Outputs {
    return new AdminFeeWithdrawCall__Outputs(this);
  }
}

export class AdminFeeWithdrawCall__Inputs {
  _call: AdminFeeWithdrawCall;

  constructor(call: AdminFeeWithdrawCall) {
    this._call = call;
  }
}

export class AdminFeeWithdrawCall__Outputs {
  _call: AdminFeeWithdrawCall;

  constructor(call: AdminFeeWithdrawCall) {
    this._call = call;
  }
}

export class JoinGameCall extends ethereum.Call {
  get inputs(): JoinGameCall__Inputs {
    return new JoinGameCall__Inputs(this);
  }

  get outputs(): JoinGameCall__Outputs {
    return new JoinGameCall__Outputs(this);
  }
}

export class JoinGameCall__Inputs {
  _call: JoinGameCall;

  constructor(call: JoinGameCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinGameCall__Outputs {
  _call: JoinGameCall;

  constructor(call: JoinGameCall) {
    this._call = call;
  }
}

export class EarlyWithdrawCall extends ethereum.Call {
  get inputs(): EarlyWithdrawCall__Inputs {
    return new EarlyWithdrawCall__Inputs(this);
  }

  get outputs(): EarlyWithdrawCall__Outputs {
    return new EarlyWithdrawCall__Outputs(this);
  }
}

export class EarlyWithdrawCall__Inputs {
  _call: EarlyWithdrawCall;

  constructor(call: EarlyWithdrawCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EarlyWithdrawCall__Outputs {
  _call: EarlyWithdrawCall;

  constructor(call: EarlyWithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class MakeDepositCall extends ethereum.Call {
  get inputs(): MakeDepositCall__Inputs {
    return new MakeDepositCall__Inputs(this);
  }

  get outputs(): MakeDepositCall__Outputs {
    return new MakeDepositCall__Outputs(this);
  }
}

export class MakeDepositCall__Inputs {
  _call: MakeDepositCall;

  constructor(call: MakeDepositCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MakeDepositCall__Outputs {
  _call: MakeDepositCall;

  constructor(call: MakeDepositCall) {
    this._call = call;
  }
}

export class UnlockRenounceOwnershipCall extends ethereum.Call {
  get inputs(): UnlockRenounceOwnershipCall__Inputs {
    return new UnlockRenounceOwnershipCall__Inputs(this);
  }

  get outputs(): UnlockRenounceOwnershipCall__Outputs {
    return new UnlockRenounceOwnershipCall__Outputs(this);
  }
}

export class UnlockRenounceOwnershipCall__Inputs {
  _call: UnlockRenounceOwnershipCall;

  constructor(call: UnlockRenounceOwnershipCall) {
    this._call = call;
  }
}

export class UnlockRenounceOwnershipCall__Outputs {
  _call: UnlockRenounceOwnershipCall;

  constructor(call: UnlockRenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RedeemFromExternalPoolCall extends ethereum.Call {
  get inputs(): RedeemFromExternalPoolCall__Inputs {
    return new RedeemFromExternalPoolCall__Inputs(this);
  }

  get outputs(): RedeemFromExternalPoolCall__Outputs {
    return new RedeemFromExternalPoolCall__Outputs(this);
  }
}

export class RedeemFromExternalPoolCall__Inputs {
  _call: RedeemFromExternalPoolCall;

  constructor(call: RedeemFromExternalPoolCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemFromExternalPoolCall__Outputs {
  _call: RedeemFromExternalPoolCall;

  constructor(call: RedeemFromExternalPoolCall) {
    this._call = call;
  }
}
